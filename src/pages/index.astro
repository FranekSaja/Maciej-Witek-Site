---
import MainLayout from "@layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import CvButton from "@components/CvButton.astro";
import ContactIcon from "@components/ContactIcon.astro";
import ContactTooltip from "@components/ContactTooltip.astro";
import H1 from '@components/mdx/H1.astro';
import H2 from '@components/mdx/H2.astro';

const bio = await getCollection("bio");
const person = bio[0]?.data;
// Po zmianie kolekcji na type: 'content' wpisy mają metodę render().
// Niektóre edytory mogą jeszcze cache'ować typy — użyjemy bezpiecznego dostępu.
let BioContent: any = null;
if (bio[0]) {
  const entry: any = bio[0];
  if (typeof entry.render === 'function') {
    const rendered = await entry.render();
    BioContent = rendered.Content;
  }
}
---

<MainLayout title="Maciej Witek — Strona oficjalna" description="Sylwetka naukowa, obszary badawcze, publikacje i kontakt.">
  <div class="flex flex-col items-center">
    <section class="bio-container">
      <div class="bio-text">
        <header class="space-y-2">
          <h1 class="h1-global">{person?.name ?? "Maciej Witek"}</h1>
          <p class="h2-global">{person?.title ?? "Uniwersytet Szczeciński"}</p>
        </header>

        <!-- Kopia zdjęcia (tylko dla widoku mobilnego) -->
        {person?.image && (
          <div class="image-wrapper hide-on-desktop">
            <img src={`${import.meta.env.BASE_URL}${person.image}`} alt={`Zdjęcie ${person.name}`} class="bio-image" />
          </div>
        )}

        <article class="prose dark:prose-invert max-w-none">
          {BioContent ? <BioContent components={{ CvButton, h1: H1, h2: H2 }} /> : <p>Uzupełnij sekcję bio w <code>src/content/bio/</code>.</p>}
        </article>

        <!-- Kopia kontaktów (tylko dla widoku mobilnego) -->
        {person.contact && (
          <div class="contact-icons-container hide-on-desktop">
            <ContactIcon iconName="mdi:phone" valueToCopy={person.contact.phone.value} id="contact-phone-mobile" />
            <ContactIcon iconName="mdi:envelope" valueToCopy={person.contact.email.value} id="contact-email-mobile" />
            <ContactIcon iconName="mdi:home" valueToCopy={person.contact.address.value} id="contact-address-mobile" />
          </div>
        )}
      </div>

      {person?.image && (
        <aside class="hide-on-mobile">
          <div class="image-wrapper">
            <img src={`${import.meta.env.BASE_URL}${person.image}`} alt={`Zdjęcie ${person.name}`} class="bio-image" />
          </div>
          {person.contact && (
            <div class="contact-icons-container">
              <ContactIcon iconName="mdi:phone" valueToCopy={person.contact.phone.value} id="contact-phone" />
              <ContactIcon iconName="mdi:envelope" valueToCopy={person.contact.email.value} id="contact-email" />
              <ContactIcon iconName="mdi:home" valueToCopy={person.contact.address.value} id="contact-address" />
            </div>
          )}
        </aside>
      )}
    </section>

    <div class="flex w-full flex-col items-end">
      <div class="flex w-[31%] flex-col items-center">
         <ContactTooltip />
      </div>
     
    </div>
    <div class="mt-1 lg:mt-2 flex w-full justify-center lg:justify-start">
      <div class="flex w-full lg:w-[31%] flex-wrap items-start justify-center lg:justify-start gap-2">
        {person.socialLinks && person.socialLinks.map((link: { href: string; text: string }) => (
          <a href={link.href} target="_blank" rel="noopener noreferrer" class="styled-link">{link.text}</a>
        ))}
      </div>
    </div>
    
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tooltip = document.getElementById('contact-tooltip');
    const contactButtons = document.querySelectorAll('.contact-button');

    contactButtons.forEach(button => {
      const valueSpan = button.querySelector('.contact-value');
      const originalText = button.getAttribute('data-value');
      let copyTimeout: any = null;

      const resetTooltip = () => {
        clearTimeout(copyTimeout);
        copyTimeout = null;
        if (tooltip) {
          tooltip.classList.remove('visible');
        }
        if (valueSpan) {
          valueSpan.textContent = originalText;
        }
      };

      button.addEventListener('mouseenter', () => {
        if (tooltip && window.innerWidth > 992 && !copyTimeout) {
          tooltip.textContent = originalText;
          tooltip.classList.add('visible');
        }
      });

      button.addEventListener('mouseleave', () => {
        if (copyTimeout) {
          resetTooltip();
        } else if (tooltip && window.innerWidth > 992) {
          tooltip.classList.remove('visible');
        }
      });

      button.addEventListener('click', () => {
        if (!originalText) return;

        button.classList.add('press');
        button.addEventListener('animationend', () => button.classList.remove('press'), { once: true });

        navigator.clipboard.writeText(originalText).then(() => {
          clearTimeout(copyTimeout);

          if (valueSpan) valueSpan.textContent = 'Copied!';
          if (tooltip && window.innerWidth > 992) {
            tooltip.textContent = 'Copied!';
            tooltip.classList.add('visible');
          }

          copyTimeout = setTimeout(() => {
            if (button.matches(':hover')) { // Jeśli kursor wciąż jest nad przyciskiem
              if (tooltip) tooltip.textContent = originalText;
            } else {
              if (tooltip) tooltip.classList.remove('visible');
            }
            if (valueSpan) valueSpan.textContent = originalText;
            copyTimeout = null;
          }, 1500);

        }).catch(err => console.error('Failed to copy text: ', err));
      });
    });
  });
</script>

<style>
  .bio-container {
    display: flex;
    flex-wrap: wrap;
    gap: 6rem;
    align-items: stretch;
    justify-content: center;
    margin-top: 4rem;
  }

  .bio-text {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 1rem;
    flex: 2;
  }

  .bio-container aside {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    flex: 1;
    max-width: 500px;
  }



  .image-wrapper {
    padding: 24px;
    background: linear-gradient(to bottom, transparent 30%, white);
    border-radius: 50%;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-inline: auto;
  }

  .bio-image {
    width: 100%;
    height: auto;
    border-radius: 50%;
    display: block;
  }

  .contact-icons-container {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
    margin-bottom: 0.3rem;
  }

  @media (min-width: 992px) and (max-width: 1400px) {
    .bio-container {
      justify-content: space-between;
    }
  }

  .hide-on-desktop {
    display: none;
  }

  @media (max-width: 992px) {
    .hide-on-mobile {
      display: none !important; /* Używamy !important, aby nadpisać inne style */
    }
    .hide-on-desktop {
      display: block; /* Używamy block dla kontenerów */
    }
    .bio-container {
      flex-direction: column;
      align-items: center;
    }
    .bio-text {
      width: 100%;
    }
    /* Dodatkowe style dla skopiowanych elementów w widoku mobilnym */
    .bio-text .image-wrapper {
      margin-bottom: 2rem;
    }
    .bio-text .contact-icons-container {
      display: flex; /* Musimy zdefiniować flex, aby działało */
      margin-top: 2rem;
      margin-bottom: 2rem;
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }
  }

  @media (max-width: 992px) {
    .contact-icons-container {
      flex-direction: column;
      display: flex;
      align-items: flex-start;
      gap: 1.5rem;
      width: 100%;
      padding-left: 0; /* Dosunięcie do lewej krawędzi */
    }
  }

  /* Usunięto style dla h1 i p, ponieważ są teraz w global.css */
  .styled-link {
    display: inline-block;
    font-weight: 600;
    text-decoration: none;
    background-color: #0c4a6e; /* Błękitne tło */
    color: #e0f2fe; /* Granatowy tekst */
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    transition: background-color 0.2s, color 0.2s;
  }
  .styled-link:hover {
    background-color: #e0f2fe; /* Granatowe tło */
    color: #0c4a6e; /* Błękitny tekst */
  }
</style>
