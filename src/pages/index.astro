---
import MainLayout from "@layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import CvButton from "@components/CvButton.astro";
import ContactIcon from "@components/ContactIcon.astro";
import ContactTooltip from "@components/ContactTooltip.astro";

const bio = await getCollection("bio");
const person = bio[0]?.data;
// Po zmianie kolekcji na type: 'content' wpisy mają metodę render().
// Niektóre edytory mogą jeszcze cache'ować typy — użyjemy bezpiecznego dostępu.
let BioContent: any = null;
if (bio[0]) {
  const entry: any = bio[0];
  if (typeof entry.render === 'function') {
    const rendered = await entry.render();
    BioContent = rendered.Content;
  }
}
---

<MainLayout title="Maciej Witek — Strona oficjalna" description="Sylwetka naukowa, obszary badawcze, publikacje i kontakt.">
  <div class="flex flex-col items-center">
    <section class="bio-container">
      <div class="bio-text">
        <header class="space-y-2">
          <h1 class="text-7xl font-bold tracking-tight">{person?.name ?? "Maciej Witek"}</h1>
          <p class="text-2xl">{person?.title ?? "Uniwersytet Szczeciński"}</p>
        </header>
        <article class="prose dark:prose-invert max-w-none">
          {BioContent ? <BioContent components={{ CvButton }} /> : <p>Uzupełnij sekcję bio w <code>src/content/bio/</code>.</p>}
        </article>
      </div>
      {person?.image && (
        <aside>
          <div class="image-wrapper">
            <img src={`${import.meta.env.BASE_URL}${person.image}`} alt={`Zdjęcie ${person.name}`} class="bio-image" />
          </div>
          {person.contact && (
            <div class="contact-icons-container">
              <ContactIcon iconName="mdi:phone" valueToCopy={person.contact.phone.value} id="contact-phone" />
              <ContactIcon iconName="mdi:envelope" valueToCopy={person.contact.email.value} id="contact-email" />
              <ContactIcon iconName="mdi:home" valueToCopy={person.contact.address.value} id="contact-address" />
            </div>
          )}
        </aside>
      )}
    </section>
    <div class="flex w-full flex-col items-end">
      <div class="flex w-[31%] flex-col items-center">
         <ContactTooltip />
      </div>
     
    </div>
    
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tooltip = document.getElementById('contact-tooltip');
    const contactButtons = document.querySelectorAll('.contact-button');

    contactButtons.forEach(button => {
      const valueSpan = button.querySelector('.contact-value');
      const originalText = button.getAttribute('data-value');
      let copyTimeout: any = null;

      // Pokaż tooltip na desktopie
      button.addEventListener('mouseenter', () => {
        if (tooltip && window.innerWidth > 768 && !copyTimeout) {
          tooltip.textContent = originalText;
          tooltip.classList.add('visible');
        }
      });

      // Ukryj tooltip na desktopie
      button.addEventListener('mouseleave', () => {
        if (tooltip && window.innerWidth > 768 && !copyTimeout) {
          tooltip.classList.remove('visible');
        }
      });

      // Logika kopiowania po kliknięciu
      button.addEventListener('click', () => {
        if (!originalText) return;

        navigator.clipboard.writeText(originalText).then(() => {
          // Wyczyść poprzedni timer, jeśli istnieje
          clearTimeout(copyTimeout);

          // Ustaw tekst na "Copied!"
          if (valueSpan) valueSpan.textContent = 'Copied!';
          if (tooltip && window.innerWidth > 768) {
            tooltip.textContent = 'Copied!';
            tooltip.classList.add('visible');
          }

          // Ustaw timer do przywrócenia oryginalnego stanu
          copyTimeout = setTimeout(() => {
            if (valueSpan) valueSpan.textContent = originalText;
            
            if (tooltip && window.innerWidth > 768) {
              if (button.matches(':hover')) {
                tooltip.textContent = originalText; // Jeśli kursor wciąż jest nad przyciskiem
              } else {
                tooltip.classList.remove('visible');
              }
            }
            copyTimeout = null; // Zresetuj stan timera
          }, 1500);

        }).catch(err => {
          console.error('Failed to copy text: ', err);
        });
      });
    });
  });
</script>

<style>
  .bio-container {
    display: flex;
    flex-wrap: wrap;
    gap: 6rem;
    align-items: stretch;
    justify-content: center;
    margin-top: 4rem;
  }

  .bio-text {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 1rem;
    flex: 2;
  }

  .bio-container aside {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    flex: 1;
    max-width: 500px;
  }



  .image-wrapper {
    padding: 24px;
    background: linear-gradient(to bottom, transparent 30%, white);
    border-radius: 50%;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-inline: auto;
  }

  .bio-image {
    width: 100%;
    height: auto;
    border-radius: 50%;
    display: block;
  }

  .contact-icons-container {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  @media (min-width: 992px) and (max-width: 1400px) {
    .bio-container {
      justify-content: space-between;
    }
  }

  @media (max-width: 992px) {
    .bio-container {
      flex-direction: column;
      align-items: center;
    }
    .bio-text, .bio-container aside {
      align-self: auto;
    }
    .bio-container aside {
      width: 100%; /* Zamrożenie szerokości kontenera */
      align-items: flex-start;
    }
  }

  @media (max-width: 992px) {
    .contact-icons-container {
      flex-direction: column;
      display: flex;
      align-items: flex-start;
      gap: 1.5rem;
      width: 100%;
      padding-left: 0; /* Dosunięcie do lewej krawędzi */
    }
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 3rem;
      line-height: 1;
    }
    p {
      font-size: 1.25rem;
    }
  }
</style>
