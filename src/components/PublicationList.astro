---
import { getCollection } from 'astro:content';
import path from 'path-browserify';
import { Icon } from 'astro-icon/components';

const publications = await getCollection('publications');
const baseUrl = import.meta.env.BASE_URL;
---

<div class="list-container">
  <ul class="publication-list">
    {publications.map((publication) => (
      <li class="publication-item">
        <a href={path.join(baseUrl, 'publications', publication.slug)} class="publication-link">
          <div>
            <span class="author">{publication.data.author}</span>
            <span class="title">{publication.data.title}</span>
          </div>
          <Icon name="mdi:arrow-right" size={24} />
        </a>
      </li>
    ))}
  </ul>
</div>

<style>
  .publication-item.hidden {
    display: none;
  }
  .publication-link > div {
    display: flex;
    flex-direction: column;
  }
  .author {
    font-size: 1rem; /* ZwiÄ™kszona czcionka */
    font-weight: 400;
    margin-bottom: 0.25rem;
  }
  .title {
    font-size: 1.125rem;
    font-weight: 600;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const searchBar = document.getElementById('search-bar');
    const publicationItems = Array.from(document.querySelectorAll('.publication-item'));
    const animations = new Map();

    searchBar.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase().trim();

      publicationItems.forEach(item => {
        const title = item.querySelector('.title')?.textContent.toLowerCase().trim() || '';
        const author = item.querySelector('.author')?.textContent.toLowerCase().trim() || '';
        const isVisible = title.includes(searchTerm) || author.includes(searchTerm);
        const isHidden = item.classList.contains('hidden');

        if (animations.has(item)) {
          animations.get(item).cancel();
        }

        if (isVisible && isHidden) {
          item.classList.remove('hidden');
          const animation = item.animate([
            { opacity: 0 },
            { opacity: 1 }
          ], { duration: 300, easing: 'ease-out' });
          animations.set(item, animation);
        } else if (!isVisible && !isHidden) {
          const animation = item.animate([
            { opacity: 1 },
            { opacity: 0 }
          ], { duration: 300, easing: 'ease-in' });
          animations.set(item, animation);
          animation.onfinish = () => {
            item.classList.add('hidden');
            animations.delete(item);
          };
        }
      });
    });
  });
</script>
